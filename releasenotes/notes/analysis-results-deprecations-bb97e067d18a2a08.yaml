---
upgrade:
  - |
    To aid with the deprecation of the ``results`` argument to
    :meth:`.ExperimentData.add_analysis_results` (see Deprecation Notes),
    :meth:`.AnalysisResultData.as_table_element` was added to
    :class:`.AnalysisResultData`. The new method allows for a result to be
    passed directly to :meth:`.ExperimentData.add_analysis_results` through
    Python dictionary unpacking like
    ``expdata.add_analysis_result(**result.as_table_element())``.
  - |
    The way that warnings about deprecated arguments are issued has been
    updated to be more reliable. Previously, warnings would not be issued for
    deprecated arguments that were left with their default values or that were
    used in internal calls by other functions in the package. The result of the
    old behavior was mainly that arguments to
    :meth:`.ExperimentData.add_analysis_results` and
    :meth:`.ExperimentData.analysis_results` that should have previously been
    issuing pending deprecation warnings did not. This release still proceeds
    with upgrading those pending deprecations to full deprecations.
  - |
    :class:`.RBAnalysis` has been updated so that it accepts for the
    ``epg_1_qubit`` option the form of analysis results returned by
    :meth:`.ExperimentData.analysis_results` when passing ``dataframe=True``.
deprecations:
  - |
    The ``results`` argument to :meth:`.ExperimentData.add_analysis_results`,
    which had previously been marked as pending deprecation, has now been
    marked as deprecated. The preferred form going forward is to create
    analysis results by passing individual properties directly as keyword
    arguments to the method rather than creating separate analysis result
    objects and passing them to the method. To reflect the fact that a single
    result is added per call in this way, the method
    :meth:`.ExperimentData.add_analysis_result` has been added as an
    alternative to :meth:`.ExperimentData.add_analysis_results`.
  - |
    Passing ``False`` to :meth:`.ExperimentData.analysis_results` for the
    ``dataframe`` argument has been deprecated. Previously, passing
    ``False`` had been marked as pending deprecation. To preserve backwards
    compatibility, the default value of ``dataframe`` remains ``False`` but a
    future release could change the default to ``True``.  Because this is a
    major change to the interface, it is not planned that the default will
    change in the next three months (the shortest allowed deprecation cycle).

    A previously common pattern was to retrieve a single result by name from an
    :class:`.ExperimentData` object ``expdata`` like:

    .. code-block:: python

       result = expdata.analysis_results("T1")
       print(f"T1 is {result.value}")

    which makes use of implicit returning the result directly instead of a list
    when there is only one match. With ``dataframe=True``, the dataframe is not
    implicitly truncated so the first match must be selected.
    :attr:`pandas.DataFrame.iloc` can be used to select the first match. The
    following block is equivalent to the previous example:

    .. code-block:: python

       result = expdata.analysis_results("T1", dataframe=True)
       print(f"T1 is {result.iloc[0].value}")
